Linux setup
===========

A Beaglebone image will be used to flash every BeagleBone. This image is
pre-configured. However, this README will document the steps required to
recreate the image, for the sake of future maintainers. The current at
the time of this document is Debian 8.5, 2016-08-07, with the kernel
``4.4.16-ti-r38``.


Preparing MicroSD card
----------------------

The image should be obtained from `this
site <http://rcn-ee.net/rootfs/bb.org/testing/>`__,
which is the repository holding the latest builds of Debian 8, Jessie.
Choose the image under ``[date]/console/bone-debian-[...].img.xz``. The
image is downloaded as a ``.img.xz`` file, and can be uncompressed with
`7-Zip <http://www.7-zip.org/>`__ or another decompression program to
obtain a ``.img`` file. This file should be burned to a MicroSD card
using
`Win32DiskImager <https://sourceforge.net/projects/win32diskimager/>`__
or `Etcher <http://www.etcher.io/>`__. This MicroSD should then be
inserted into a BeagleBone Black Industrial to complete the setup
process (either an Element14 or an Arrow board will work).

My experience has been that with the MicroSD inserted, the BeagleBone
will automatically boot from the MicroSD. If it does not, powering on
while holding the *boot* button (the button on the opposite end from the
ethernet port) will force boot from MicroSD. The easiest way to connect
to the device is via the header pins and a USB-serial adapter. To do
this, download `Putty <http://www.putty.org/>`__. The connection will
involve the following settings:

-  Connection type: Serial
-  Speed: 115200
-  Serial line: Look in Device Manager to discover what COM device to
   use.

Open the Putty session, plug in the BeagleBone, login as root (no
password) and begin the configuration process.


Add User
--------

*maybe we don't actually need to create a different user* The first task
is creating a user. Use the ``adduser`` command to do so, and add the
user to the sudo (administrators) group.

.. code:: bash

    adduser hygen
    # Enter password for the hygen account. Currently Power16
    adduser hygen admin

``sudo``, short for substitute user, allows a user to run commands as a
different user. The default user to run commands is ``root``, the master
administrator account on Linux. We want to ensure that the admin group
can use the sudo command. We're going to disable login as root for
security, so it's crucial that we can still use other accounts to
perform administrative tasks.

.. code:: bash

    visudo
    # This opens up an editor (probably nano) with the /etc/sudoers file.

We want to make sure that this file has the following line:

::

    # Allow members of group sudo to execute any command
    %admin   ALL=(ALL) ALL

If the line is commented out, uncomment it. Then we want to test that
the ``hygen`` user can in fact use sudo to execute commands as root. Log
out with ``exit`` and log back in as hygen. Then execute following
command:

.. code:: bash

    sudo whoami

It should prompt for hygen's password, then print ``root``. This
confirms that sudo has been enabled. Next we will setup the network
(remember to stay logged in as hygen).


Network Setup
-------------

Plug the BeagleBone into the office ethernet. It may automatically
acquire an IP address and connect to the internet. Check this by testing
``ping``.

.. code:: bash

    ping 8.8.8.8

If this returns an error with
``ping: icmp open socket: Operation not permitted``, the ``ping``
application does not have the SUID bit set. The SUID bit is a permission
which lets anyone run a given application as the owner of that file. In
the case of ping (use ``which ping`` to find where it lives), that is
``root``, which is a good thing, since it needs ``root`` permission to
open a network socket. We'll set the SUID bit on that file using the
following command.

.. code:: bash

    sudo chmod +s $(which ping)

.. note::

   If ping returned ``connect: Network is unreachable``, skip down to
   interface configuration section; you may need to return to this
   section if the ``Operation not permitted`` arises later.

Now test our change by trying ``ping 8.8.8.8`` again. Don't worry if it
gives an error, we'll configure the network in a second. Just ensure
that it doesn't give the same
``ping: icmp open socket: Operation not permitted`` error.

Now we want to configure the network. This is done using the interfaces
file. In Debian, this lives at ``/etc/network/interfaces``. You can use
whichever editor you prefer to edit this file. There are basically only
two choices on the system at this point: ``vi`` and ``nano``. ``vi`` is
a modal editor, with a fairly steep learning curve, but ultimately more
efficient. ``nano`` is a very simple editor, probably simpler if you've
never used ``vi``. This file is a system configuration file, owned by
``root``, so you must use sudo to open it.

.. code:: bash

    sudo nano /etc/network/interfaces

Now we want to configure the ``eth0`` interface. Find the section
starting with ``iface eth0``. If this hygen is being used in the office,
assign it a free IP address (the list is on the X drive, as 
Static_IPs.xlsx as of 2016-07-26). If it is going out
to a site, we'll eventually want to turn the IP back to DHCP, but for
now we'll assign it a static IP for continuing setup.

.. code:: bash

    auto eth0
    iface eth0 inet static
    address 10.50.0.x
    gateway 10.50.0.1
    netmask 255.255.255.0
    dns-nameservers 8.8.8.8 8.8.4.4

Replace *x* with the chosen IP address. This will configure the
BeagleBone for use on Planetary Power's ethernet. Reboot the system to
apply the changes.

.. code:: bash

    sudo reboot

Test the network connection again.

.. code:: bash

    ping 8.8.8.8
    ping google.com

This should now show ping responses. If not, the network is not properly
configured, and that must be solved before continuing.


Setup SSH
---------

We now want to switch to SSH for logging in, as it's both faster and
more convenient than the header pins. Also, once the interface PCB board
is attached, the pins will be inaccessible. The simplest way to use SSH
from Windows is the `Chrome
App <https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo>`__.
Enter the static IP address we chose as the IP address and ``hygen`` as
the username. Accept the warning about the unknown signature.

Since we've connected the BeagleBone to the network, we need to disable
root login from SSH, as it currently is permitted with no password. SSH
configuration is found in ``/etc/ssh/sshd_config``. Use your editor of
choice to edit the file (using ``sudo``). In the ``Authentication``
section, make sure there is the following line:

::

    PermitRootLogin no

Also change this:

::

    PermitEmptyPasswords no

If you want, you can also setup a banner to show when logging in via
SSH. This can be done with the following two steps:

::

    # /etc/ssh/sshd_config
    Banner /etc/banner

.. code:: bash

    sudo nano /etc/banner

Suggested banner:

::

     _    _                        _                                 
    | |  | |                      | |                                
    | |__| |_   _  __ _  ___ _ __ | |     ___   __ _  __ _  ___ _ __ 
    |  __  | | | |/ _` |/ _ \ '_ \| |    / _ \ / _` |/ _` |/ _ \ '__|
    | |  | | |_| | (_| |  __/ | | | |___| (_) | (_| | (_| |  __/ |   
    |_|  |_|\__, |\__, |\___|_| |_|______\___/ \__, |\__, |\___|_|   
             __/ | __/ |                        __/ | __/ |          
            |___/ |___/                        |___/ |___/           



Update System Packages
----------------------

If you've chosen a recent image, there shouldn't be much to do in a
system update, but we'll do one anyway, since we're going to be
installing packages, and installing onto an out-of-date system is not
recommended. We'll update the package indexes first, then upgrade
out-of-date packages, and finally clean downloaded packages and
autoclean any packages we haven't asked for.

.. code:: bash

    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get clean
    sudo apt-get autoclean

On Linux systems, each program provides a manual page which describes
its functionality and how to use the program. These manpages, as they
are called, are an invaluable resource in using a Linux system.
Unfortunately, the console version of Linux we installed does not
include the ``man`` command. Add it using the following commands:

.. code:: bash

    sudo apt-get install man-db manpages manpages-dev
    # Try the man command
    man lsblk  # We'll use this next


Grow Root Partition
-------------------

We chose to install the console image, because it has very minimal
software installed. However, the image is also only a 2 GB image, so
we're not using our entire MicroSD, so we won't be using the entire EMMC
when we flash it. We'll use ``fdisk`` to fix this. ``fdisk`` is an
interactive program, so comments in the Bash below will narrate what
actions to take inside it.

.. code:: bash

    # Start by listing all the drives and partitions
    lsblk
    # mmcblk0 should have only one partition on it (mmcblk0p1). This is
    # the uSD card.
    sudo fdisk /dev/mmcblk0
    # Delete the existing partition with 'd'
    # New primary partition with 'n', then 'p', '1', 'ENTER', 'ENTER'
    # Write out the new partition table with 'w'

    # Reboot to apply the new partition table.
    sudo reboot

After we've expanded the partition, we need to resize the filesystem to
fill the whole partition. We'll do that using the ``resize2fs`` command.

.. code:: bash

    sudo resize2fs /dev/mmcblk0p1

Notice that while in the previous section we were acting on the disk
itself (at ``/dev/mmcblk0``), with this command we're acting on the
partition (``/dev/mmcblk0p1``).

Now check to make sure we've succeeded in using the full disk using
``df``, which reports on disk filesystem space usage.

.. code:: bash

    df -h

``df`` ought to report that ``/dev/mmcblk0p1`` is 3.7G now, with about
25% usage.


Install Necessary Libraries
---------------------------

We'll be using Python 3, so we need to install that package. We'll
actually just install ``pip``, Python's package manager, and it will
pull in Python as a dependency.

.. code:: bash

    sudo apt-get install python3-pip

Now that we've got ``pip``, we'll use that to grab modbus\_tk. This will
pull in ``pyserial`` as a dependency. We'll also grab ``recordclass``, a
library which provides a mutable version of Python's ``namedtuple``.

.. code:: bash

    sudo pip3 install modbus_tk
    sudo pip3 install recordclass

We also use the ``config-pin`` utility from the `Beaglebone Universal
IO <https://github.com/cdsteinkuehler/beaglebone-universal-io>`__
library. This utility is included in most base images for the
BeagleBone, but the console image we used left it out to save space.
We'll install it (just the utility) from the Github repositories. The
device tree overlays in that repository are already installed in kernel
4.1+ and some 3.8 images.

.. code:: bash

    cd ~
    wget https://github.com/cdsteinkuehler/beaglebone-universal-io/archive/master.zip
    sudo apt-get install unzip  # Not included in default install
    unzip master.zip
    rm master.zip
    cd beaglebone-universal-io-master
    sudo make install_target  # This installs the utility but not the DTOs


Setup universal cape loading on boot
------------------------------------

In order to use the conig-pin utility, a universal cape must be loaded.
The next step will load the universal cape on boot. With your editor of
choice, open ``/boot/uEnv.txt`` as root. Uncomment the line below
"Beaglebone Black: HDMI (Audio/Video) disabled". This line should say
something like ``dtb=am335x-boneblack-emmc-overlay.dtb``.

We'll also autoload the ``univ-emmc`` cape on boot. To do this,
uncomment the line just below ``##Example 4.1.x`` which enables
extra parts. Add ``univ-emmc`` to that line, as follows below::

    cape_enable=bone_capemgr.enable_partno=univ-emmc

.. warning::

   Syntax errors in the ``uEnv.txt`` file can make the system
   unbootable. Double check any changes before rebooting to keep from
   bricking your machine. If the machine *is* bricked, follow the
   instructions in :ref:`bricked` to restore to a bootable state.


Setup USB Mounting
------------------

``pmount``, the tool we use to mount and unmount usb drives in userspace,
 is not installed, so we need to add that.

.. code:: bash

    sudo apt-get install pmount


Pinmux script
-------------

There's a very handy script to show a nicely-formatted list of pins and
their current state in the pin-mux included on the image. However, it's
inconveniently located at ``/opt/scripts/device/bone/show-pins.pl``.
Rather than typing ``sudo perl /opt/scripts/device/bone/show-pins.pl``
every time, let's create a link to make it easy to use. To do this, we
will create a small script file at ``/usr/local/bin/show-pins`` and
make it executable.

.. code:: bash
	
    sudo nano /usr/local/bin/show-pins

Edit the file to contain the following two lines. The first line is a
comment which tells the shell how to run this file we've marked as
executable. The second line actually calls the script.

.. code:: bash

    #!/bin/bash
	sudo perl /opt/scripts/device/bone/show-pins.pl | sort

After creating and saving the file, make it executable and reboot.

.. code:: bash

    # Save and make it executable
	sudo chmod +x /usr/local/bin/show-pins

    # Reboot one more time to apply all our settings
    sudo reboot


Hygen Software
--------------

It's finally time to add our software to the mix. We'll do this by
cloning from our private GitHub repository.

.. note::
    The way
    we add our software may change if we install our software to some native
    Linux directory rather than in hygen's home directory.

.. code:: bash

    cd ~
    sudo apt-get install git
    git clone https://github.com/BillMarty/HyGenCMS.git
    # Manually install doctools, as it hangs if installed automatically
    sudo pip3 install doctools

We then can install the executable. For instructions on this part, see
:ref:`hygencms-installation`.


Auto-starting Service
---------------------

To make the service start on boot, we create a service description file.
Debian 8 just switched to a new init system called systemd. The init
system is the mechanism which starts the Linux system. It is the first
process to run on boot, and is responsible for starting all the other
processes. Since it starts all other processes, it also is responsible
for managing the other processes, and can ensure they continue to run.
We will use this functionality to restart our Python program if it
crashes.

The HyGenCMS repository contains a ``.service`` file which provides
a ``systemd`` service. We just need to load it into the systemd. This
can be done using the ``systemctl`` command. If the paths to the
repository are different than mine, we'll need to modify those in the
``.service`` files.

.. code:: bash

    cd
    sudo systemctl enable ~/HyGenCMS/linux_setup/hygencms.service


Change Setup Values Back to Production Values
---------------------------------------------

There are some configuration options which worked well to setup the
system, which need to be changed for the shipping HyGen. Specifically,
the clock syncs by default to NTP time servers. While this works well
when we're connected to the internet, our shipping HyGen will set the
system clock based on the DeepSea's time. To disable NTC syncing, we
need to disable two systemd services.

.. code:: bash

    sudo systemctl disable ntp
    # Located at /etc/init.d/ntp
    sudo timedatectl set-ntp false

If you ever want to reenable these services, just use the ``enable``
command to reverse it.

.. code:: bash

    sudo systemctl enable ntp
    sudo timedatectl set-ntp true

The second change we'll want to make before finalizing our Linux image
has to do with the ethernet network. While it is convenient to set the
BeagleBones with static IP addresses when they are in the office, when
they are in the real world, they will need to use DHCP to connect to
most networks. Therefore, we'll change the ``/etc/network/interfaces``
file back to what it was originally:

.. code:: bash

    sudo nano /etc/network/interfaces
    # Edit the lines to the following:

    # The primary network interface
    auto eth0
    iface eth0 inet dhcp

On restart, these new changes will take effect.

.. note
    this will make it more difficult to connect to the BBB using SSH,
    so this step should only be done when everything on the image is
    finalized.


.. _flash-emmc:

Flash Internal eMMC
-------------------

Once we've setup the microSD card to contain the system as we want it
to be for the HyGen, we'd like to simply duplicate it to each BBB.
Luckily, this is easy to do. There is a script included with the Debian
image which can flash the internal eMMC from the microSD card.

.. code:: bash

    cd /opt/scripts/tools/eMMC/
    sudo ./init-eMMC-flasher-v3.sh

This script while take a little while to run. When it finishes, power
off the system, remove the microSD card, and power back on.


Make Flasher Image
------------------

The image can be made into a specialized flasher image, which does not
boot into a full Linux system, but simply flashes itself onto the
internal eMMC. To do this, boot from the internal eMMC and run the
script ``beaglebone-black-make-microSD-flasher-from-eMMC.sh``.

.. code:: bash

    cd /opt/scripts/tools/eMMC
    sudo ./beaglebone-black-make-microSD-flasher-eMMC.sh


.. _bricked:

Fixing a Bricked System
-----------------------

If the system is not booting, there are several causes which could be
to blame. The most likely, easiest to fix problem is an error in the
``/boot/uEnv.txt`` file. The easiest fix is if we're currently booting
off the microSD and the on-board flash contains a bootable Linux
system. In this case, simply power off the board, then unplug the
microSD card and power the system on. If this works, skip ahead to
:ref:`bricked-booted`.

If there isn't a bootable system on the internal eMMC, it might be easier
to just start over this guide. If you want to try to recover your work,
burn a new microSD card, boot from it, then follow the instructions
from :ref:`flash-emmc` to get a bootable system on the internal eMMC,
then continue from :ref:`bricked-booted` below.


.. _bricked-booted:

Once booted
^^^^^^^^^^^

Once we've booted from the internal eMMC, we can mount the microSD
card to revert the changes we made to ``uEnv.txt`` that bricked it.
The first step is to mount the drive. We will list the device files in
``/dev`` before and after inserting the microSD card in order to
confirm the name of the SD card.

.. code:: bash

    ls /dev | grep mmc
    # Insert microSD
    !! # This Bash shortcut repeats last-used command

The microSD will appear in only the second list. It will likely be
``/dev/mmcblk0``. We'll mount the first partition on a directory in
``/media``.

.. code:: bash

    cd /media
    sudo mkdir uSD
    sudo mount /dev/mmcblk0p1 uSD
    cd uSD
    ls

Now the root filesystem of the microSD is mounted at uSD. You can now
use your editor of choice to edit (as root) the ``uEnv.txt`` file. I
use ``vi``.

.. code:: bash

    sudo vi /media/uSD/boot/uEnv.txt
    # Undo any changes that bricked the device

Now reboot, and hopefully the system is unbricked.
