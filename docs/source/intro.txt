=====
Intro
=====

The HyGen Communication Management System, or CMS, is controlled by
this Python package, running on a BeagleBone Black or BeagleBone Black
clone such as the one manufactured by Arrow. It serves several functions
in the HyGen hybrid generator. First, it logs data from the DeepSea,
Beckett BMS, and analog inputs. Second, it sets the RPM setpoint for the
Woodward engine speed controller. This software is intended to function
on the Linux kernel versions 4.1+, as 4.1 introduced breaking changes
to the kernel interface file structure, and supports the Arrow
BeagleBone Black Industrial on the same image as other BeagleBone Black
devices.

Detailed Behavior Specification
-------------------------------

This section will describe the behavior of the software, as observed
from its side-effects. Error logging is not included in this
description.

* Communicate with the DeepSea via Modbus RTU over RS-232.
* Set the battery gauge level based on the DeepSea measured voltage.
* Set the fuel gauge level based on the DeepSea measured fuel level.
* Tell the DeepSea about a CMS fault or CMS warning through ModBus
registers.
* Control a PWM signal to the Woodward engine controller, controlled by
PID control to set analog trunk current to 25A.
* Hold 12V power high to prevent being powered off unexpectedly.
* Record data from DeepSea, BMS, and analog inputs to CSV file on USB
drive.
* Set USB LED to on during writes to USB drive.
* On button-press, eject the USB drive.
* Turn on an LED to indicate safe to remove USB drive.


.. _hygencms-installation:

Installation
------------

The HyGen CMS software is meant to run on Debian 8, Jessie, with Linux
kernel 4.1+. The installation of Linux to reach a working system is
covered in detail in `Linux Setup <linuxsetup.html>`_. On a working
Linux system with Python 3, install the CMS software with the following
commands::

    cd HyGenCMS
    sudo python3 setup.py install

This will install the ``hygencms`` command to ``/usr/local/bin``, where
it can be run from the command line. All necessary dependencies listed
in ``requirements.txt`` are automatically installed by the Python
packaging system.

This software is developed in the Python programming language. While an
effort has been made to maintain compatibility between Python 2 and Python
3, Python 3 is the recommended platform, as it is stable, and is
the platform being used for continued development.

Apart from Python libraries, HyGenCMS relies on several shell commands
to be installed and present in the root PATH:

- ``pmount``
- ``pumount``
- ``lsblk``
- ``mount``
- ``config-pin``

Some of these commands should be included on every Debian build.
Detailed instructions for installing the rest are given in the
`Linux Setup <linuxsetup.html>`_ section.

Program Flow
------------

This section will review the code flow of the program, at a high level.
Code-level detail will not be included, but the basic passage of data
will be outlined.

The primary entry-point to the HyGen CMS software is the ``main``
function, contained in ``hygencms/__main__.py``. This function is
called by the ``hygencms`` command in the ``PATH``. It parses
command line arguments and reads the configuration file, then calls
the ``main`` function inside ``hygencms/main.py`` with the correct
configuration arguments.

After the ``main`` function starts, it starts multiple threads, one
for each data source or sink: the DeepSea, BMS, Analog inputs, log
files, and Woodward each have their own thread. Each thread then is
responsible for reading or writing its own data. Connections between
the main thread and IO threads are made in three places. Each input
thread has a ``csv_line`` method, which returns a string of comma
separated values for that time increment. If the program is not
running in daemon mode, the ``print_data`` method is used to print
data for that time increment to the screen. The final method of
communication between threads is that the many of the threads store
the data they gather directly in a central dictionary, and the main
thread sometimes pulls data directly from the dictionary.

The main thread is structured as an
event loop. It keeps a record of when it ought to next run each group
of tasks, then checks at each loop whethere it is now time to run each
group. At each loop, it sleeps for a short time. This keeps the other
threads from starving.
